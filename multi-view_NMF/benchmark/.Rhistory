dat=subset(dat,annotation %in% pick.cell.clusters)
df.expr=dat@assays$RNA@counts;
dim(df.expr); #sn:12602 50588
df=as.numeric();
genes=list();
for(i.sex in c('male','female')){
for(i.cluster in pick.cell.clusters){
mat=df.expr[,dat$sex==i.sex & dat$annotation==i.cluster]
#gene.filter=Matrix::rowSums(mat>0) > max(5,ncol(mat)*0.05)
gene.filter=Matrix::rowSums(mat>0) > max(10,ncol(mat)*0.1)
mat=as.matrix(mat[gene.filter,])
ncell=ncol(mat);
ngene=sum(gene.filter)
df=rbind(df,c(i.sex,i.cluster,ncell,ngene))
genes[[paste0(i.sex,i.cluster,sep='__')]]=rownames(mat)
}
}
df=as.data.frame(df)
colnames(df)=c('sex','cell.cluster','ncell','ngene')
df$ncell=as.numeric(df$ncell)
df$ngene=as.numeric(df$ngene)
df.sub=df[df$sex=='female',]
x=df.sub[order(df.sub$ncell),]$cell.cluster
df$cell.cluster=factor(df$cell.cluster,levels=x)
p2=ggplot(df,aes(x=cell.cluster,y=ncell))+geom_bar(stat='identity')+
facet_wrap(.~sex)+scale_y_log10()+theme_classic()+
coord_flip()
if(dataset=='sn'){
p2=p2+ggtitle('Single-nuclei dataset, after pre-processing')
}else{
p2=p2+ggtitle('Single-cell dataset, after pre-processing')
}
p3=ggplot(df,aes(x=cell.cluster,y=ngene))+geom_bar(stat='identity')+
facet_wrap(.~sex)+scale_y_log10()+theme_classic()+
coord_flip()
if(dataset=='sn'){p3=p3+ggtitle('Single-nuclei dataset, after pre-processing')
}else{p3=p3+ggtitle('Single-cell dataset, after pre-processing') }
## genes express xx cell clusters
all.genes=unlist(genes)
x=table(table(all.genes))
dfx=as.data.frame(x)
colnames(dfx)=c('#cell.cluster one gene expressed',ylab='#gene')
p4=ggplot(dfx,aes(x=dfx[,1],y=dfx[,2]))+geom_bar(stat='identity')+
theme_classic()+
xlab('#cell.cluster one gene is effectively expressed')+
ylab('#gene')+coord_flip()
if(dataset=='sn'){p4=p4+ggtitle('Single-nuclei dataset, gene exprssion breadth')
}else{p4=p4+ggtitle('Single-cell dataset, gene exprssion breadth')}
pdf(paste0('dataset_',dataset,'.pdf'),useDingbats = T,height = 16,width = 14)
grid.arrange(p1+theme(axis.text.y = element_text(size=5)),
p2,p3+ylab('#expressd gene'),
p4+theme(axis.text.y = element_text(size=5)),ncol=2)
dev.off()
library(SingleCellExperiment)
library(SCopeLoomR)
library(Seurat)
library(Seurat)
library(ggplot2);library(gridExtra);
options(stringsAsFactors = F)
#dataset='sc';
dataset='sn';
## read in raw data
if(dataset=='sn'){
# data download from https://flycellatlas.org/
loom_path <- '../single.cell_datasets/FCA_head/s_fca_biohub_head_10x.loom';
loom <- open_loom(loom_path, mode="r+")
cell.annotation.all=get_cell_annotation(loom)
dim(cell.annotation.all) #11788   435
labels=colnames(cell.annotation.all)
tmp=cell.annotation.all[,-grep('TrackRegulonsAUC|MotifRegulonsAUC',labels)]
colnames(tmp)
table(tmp$batch_id)
sort(table(tmp$batch))
sort(table(tmp$id))  #only two samples
sort(table(tmp$batch))==sort(table(tmp$id)) #batch <=> id
cell.annotation.df=tmp
colnames(cell.annotation.df)
head(cell.annotation.df$annotation)
table(cell.annotation.df$annotation)
#genes=get_genes(loom)
#length(genes) #13056 genes
#raw <- get_dgem(loom)
#raw[1:5,1:5]
#dim(raw) #13056 gene by 100527 cell
close_loom(loom)
x=table(cell.annotation.df$sex,cell.annotation.df$annotation)
df.raw=reshape2::melt(x)
colnames(df.raw)=c('sex','cell.cluster','ncell')
}else{
## cell type info
df.cell=read.table("../single.cell_datasets/fly.brain.atlas/GSE107451_DGRP-551_w1118_WholeBrain_57k_Metadata.tsv.gz",as.is=T,header=T);
table(df.cell$annotation);table(df.cell$sex)
#sum(df.cell$annotation=='Hsp') #668 cells annotated to 'Hsp'
# remove them due to personal email communication, they are 'stressed' cells.
x=table(df.cell$sex,df.cell$annotation)
df.raw=reshape2::melt(x)
colnames(df.raw)=c('sex','cell.cluster','ncell')
}
dim(df.raw)
df.sub=df.raw[df.raw$sex=='female',]
x=df.sub[order(df.sub$ncell),]$cell.cluster
df.raw$cell.cluster=factor(df.raw$cell.cluster,levels=x)
p1=ggplot(df.raw,aes(x=cell.cluster,y=ncell))+geom_bar(stat='identity')+
facet_wrap(.~sex)+scale_y_log10()+theme_classic()+
coord_flip()
if(dataset=='sn'){p1=p1+ggtitle('Single-nuclei dataset')
}else{p1=p1+ggtitle('Single-cell dataset') }
## read in processed wholebrain data
if(dataset=='sn'){
file="../single.cell_datasets/FCA_head/whole_head_filtered_valid.rds";
}else{
file="../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
}
dat=readRDS(file);
df.expr=dat@assays$RNA@data #logNormal
unique(dat@meta.data$sex)
table(dat@meta.data$annotation)
## separate female and male, select cell clusters that contain>=500cells in both sexes
min.cell=100;max.cell=Inf;
i=apply(table(dat$sex,dat$annotation),2,function(i)sum(i>=min.cell & i<max.cell))
pick.cell.clusters=names(which(i==2)) #79
pick.cell.clusters #sn,54; sc,60.
dat=subset(dat,annotation %in% pick.cell.clusters)
df.expr=dat@assays$RNA@counts;
dim(df.expr); #sn:12602 50588
df=as.numeric();
genes=list();
for(i.sex in c('male','female')){
for(i.cluster in pick.cell.clusters){
mat=df.expr[,dat$sex==i.sex & dat$annotation==i.cluster]
#gene.filter=Matrix::rowSums(mat>0) > max(5,ncol(mat)*0.05)
gene.filter=Matrix::rowSums(mat>0) > max(10,ncol(mat)*0.1)
mat=as.matrix(mat[gene.filter,])
ncell=ncol(mat);
ngene=sum(gene.filter)
df=rbind(df,c(i.sex,i.cluster,ncell,ngene))
genes[[paste0(i.sex,i.cluster,sep='__')]]=rownames(mat)
}
}
df=as.data.frame(df)
colnames(df)=c('sex','cell.cluster','ncell','ngene')
df$ncell=as.numeric(df$ncell)
df$ngene=as.numeric(df$ngene)
df.sub=df[df$sex=='female',]
x=df.sub[order(df.sub$ncell),]$cell.cluster
df$cell.cluster=factor(df$cell.cluster,levels=x)
p2=ggplot(df,aes(x=cell.cluster,y=ncell))+geom_bar(stat='identity')+
facet_wrap(.~sex)+scale_y_log10()+theme_classic()+
coord_flip()
if(dataset=='sn'){
p2=p2+ggtitle('Single-nuclei dataset, after pre-processing')
}else{
p2=p2+ggtitle('Single-cell dataset, after pre-processing')
}
p3=ggplot(df,aes(x=cell.cluster,y=ngene))+geom_bar(stat='identity')+
facet_wrap(.~sex)+scale_y_log10()+theme_classic()+
coord_flip()
if(dataset=='sn'){p3=p3+ggtitle('Single-nuclei dataset, after pre-processing')
}else{p3=p3+ggtitle('Single-cell dataset, after pre-processing') }
## genes express xx cell clusters
all.genes=unlist(genes)
x=table(table(all.genes))
dfx=as.data.frame(x)
colnames(dfx)=c('#cell.cluster one gene expressed',ylab='#gene')
p4=ggplot(dfx,aes(x=dfx[,1],y=dfx[,2]))+geom_bar(stat='identity')+
theme_classic()+
xlab('#cell.cluster one gene is effectively expressed')+
ylab('#gene')+coord_flip()
if(dataset=='sn'){p4=p4+ggtitle('Single-nuclei dataset, gene exprssion breadth')
}else{p4=p4+ggtitle('Single-cell dataset, gene exprssion breadth')}
pdf(paste0('dataset_',dataset,'.pdf'),useDingbats = T,height = 16,width = 14)
grid.arrange(p1+theme(axis.text.y = element_text(size=5)),
p2,p3+ylab('#expressd gene'),
p4+theme(axis.text.y = element_text(size=5)),ncol=2)
dev.off()
library(AUCell)
library(Seurat)
library(ggplot2);library(gridExtra);
options(stringsAsFactors = F)
top=0.4;
## read in genes
input.folder='./brain_scRNA-seq/';
#input.folder='./brain_snRNA-seq_n10c0.1/';
outfile=paste0('AUCell',top,'_sc_useall_n10c0.1_T3_K25.rds');
out=readRDS(outfile)
length(out) # #cell.cluster
## pick one cell cluster and plot AUCell by age
tmp=sort(sapply(out,length),decreasing = T)
(cluster.name=names(tmp[15]))#which cell cluster has most cells
pick.cluster=out[[cluster.name]]
pick.female=c('female__0','female__Ensheathing_glia','female__TmY14')
pick.male=c(gsub('female','male',pick.female));
pick=c(pick.female,pick.male);
pick.female=c('female__0','female__Ensheathing_glia','female__TmY14')
pick.male=c(gsub('female','male',pick.female));
pick=c(pick.female,pick.male);
pdf('age_aucell.pdf',useDingbats = T)
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=14,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
}
dev.off()
library(AUCell)
library(Seurat)
library(ggplot2);library(gridExtra);
options(stringsAsFactors = F)
top=0.4;
## read in genes
input.folder='./brain_scRNA-seq/';
#input.folder='./brain_snRNA-seq_n10c0.1/';
outfile=paste0('AUCell',top,'_sc_useall_n10c0.1_T3_K25.rds');
#outfile=paste0('AUCell',top,'_sn_useall_n10c0.1_T3_K25.rds');
## read in modules
modules=readRDS('sc_useall_n10c0.1_T3/K25_module.genes.rds');
#modules=readRDS('sn_useall_n10c0.1_T3/K17_module.genes.rds')
names(modules)=paste0('module',1:length(modules))
#modules.go=readRDS('sc_useall_n10c0.1_T3/K25_common.modules.GO.rds')
#modules.go=readRDS('sn_useall_n10c0.1_T3/K17_common.modules.GO.rds')
#head(modules.go[[3]]@result$Description)
## read in genes
genes=readRDS(paste0(input.folder,'all_common_genes.rds'))
c.genes=unlist(genes$genes)
all.genes=genes$all.genes
common.genes=genes$common.genes
#gene.names=genes$all.genes
gene.names=names(which(table(c.genes)>=length(genes$genes)/2))
gene_count=length(gene.names) #3015 for sc, 1351 for sn
## read in processed wholebrain data
if(length(grep('sn',outfile))==1){
file="../single.cell_datasets/FCA_head/whole_head_filtered_valid.rds";
}else{
file="../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
}
dat=readRDS(file);
df.meta=dat@meta.data;
out=readRDS(outfile)
length(out) # #cell.cluster
## pick one cell cluster and plot AUCell by age
tmp=sort(sapply(out,length),decreasing = T)
(cluster.name=names(tmp[15]))#which cell cluster has most cells
pick.cluster=out[[cluster.name]]
pick.female=c('female__0','female__Ensheathing_glia','female__TmY14')
pick.male=c(gsub('female','male',pick.female));
pick=c(pick.female,pick.male);
pdf('age_aucell.pdf',useDingbats = T)
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=14,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
}
dev.off()
out=readRDS(outfile)
length(out) # #cell.cluster
## pick one cell cluster and plot AUCell by age
tmp=sort(sapply(out,length),decreasing = T)
(cluster.name=names(tmp[15]))#which cell cluster has most cells
pick.cluster=out[[cluster.name]]
pick.female=c('female__0','female__Ensheathing_glia','female__TmY14')
pick.male=c(gsub('female','male',pick.female));
pick=c(pick.female,pick.male);
pdf('age_aucell.pdf',useDingbats = T)
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=14,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
}
dev.off()
dev.off()
pdf('age_aucell.pdf',useDingbats = T)
par(mfrow=c(2,3))
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=14,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
}
dev.off()
plot_list=list();
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
x=pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=14,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
plot_list[[cluster.name]]=x[[4]]
}
pdf('age_aucell.pdf',useDingbats = T)
grid.arrange(arrangeGrob(grobs= plot_list,ncol=2))
dev.off()
plot_list=list();
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
x=pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=10,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
plot_list[[cluster.name]]=x[[4]]
}
pdf('age_aucell.pdf',useDingbats = T)
grid.arrange(arrangeGrob(grobs= plot_list,ncol=2))
dev.off()
pdf('age_aucell.pdf',useDingbats = T,height = 16)
grid.arrange(arrangeGrob(grobs= plot_list,ncol=2))
dev.off()
plot_list=list();
for(cluster.name in pick){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
x=pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=12,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
plot_list[[cluster.name]]=x[[4]]
}
pdf('age_aucell.pdf',useDingbats = T,height = 16)
grid.arrange(arrangeGrob(grobs= plot_list,ncol=2))
dev.off()
pick
plot_list=list();
for(cluster.name in pick[c(1,4,2,5,3,6)]){
pick.cluster=out[[cluster.name]];
df.meta.sub=df.meta[colnames(pick.cluster),]
cat(cluster.name,'\n')
print(table(df.meta.sub$Age));
x=sapply(sort(unique(df.meta.sub$Age)),function(i){
cells=rownames(df.meta.sub[df.meta.sub$Age==i,])
apply(pick.cluster[,cells],1,mean)})
x=t(x)
rownames(x)=sort(unique(df.meta.sub$Age))
x=pheatmap::pheatmap(x,cluster_rows=FALSE,
display_numbers = round(x,2),
fontsize_number=12,fontsize_row=14,
fontsize_column=14,
main=paste0('cell.cluster: ',cluster.name),
clustering_method='ward.D2')
plot_list[[cluster.name]]=x[[4]]
}
#https://www.biostars.org/p/128229/
pdf('age_aucell.pdf',useDingbats = T,height = 16)
grid.arrange(arrangeGrob(grobs= plot_list,ncol=2))
dev.off()
colnames(Out)
colnames(out)
#m1=readRDS('sc_useall_n10c0.1_T3/K25_common.modules.genes.rds')
#m2=readRDS('sn_useall_n10c0.1_T3/K17_common.modules.genes.rds')
m1=readRDS('sc_useall_n10c0.1_T3/K25_module.genes.rds')
m2=readRDS('sn_useall_n10c0.1_T3/K17_module.genes.rds')
m1
rep(1:length(m1),sapply(m1,length))
paste('module',rep(1:length(m1),sapply(m1,length)))
df.m1=data.frame(gene.symbol=unlist(m1),
module.id=paste('module',rep(1:length(m1),sapply(m1,length))))
head(df.m1)
write.table('genes.in.modules.txt',quote=F,row.names = F)
write.table(df.m1,'genes.in.modules.txt',quote=F,row.names = F)
df.m2=data.frame(gene.symbol=unlist(m2),
module.id=paste('module',rep(1:length(m2),sapply(m1,length))))
write.table(df.m2,'sn_genes.in.modules.txt',quote=F,row.names = F)
df.m2=data.frame(gene.symbol=unlist(m2),
module.id=paste('module',rep(1:length(m2),sapply(m2,length))))
write.table(df.m2,'sn_genes.in.modules.txt',quote=F,row.names = F)
df.m1=data.frame(gene.symbol=unlist(m1),
module.id=paste('module',rep(1:length(m1),sapply(m1,length))))
write.table(df.m1,'sc_genes.in.modules.txt',quote=F,row.names = F)
df.m2=data.frame(gene.symbol=unlist(m2),
module.id=paste('module',rep(1:length(m2),sapply(m2,length))))
write.table(df.m2,'sn_genes.in.modules.txt',quote=F,row.names = F)
df.m1=data.frame(gene.symbol=unlist(m1),
module.id=paste('module',rep(1:length(m1),sapply(m1,length))))
write.table(df.m1,'sc_genes.in.modules.txt',sep'\t',quote=F,row.names = F)
df.m2=data.frame(gene.symbol=unlist(m2),
module.id=paste('module',rep(1:length(m2),sapply(m2,length))))
write.table(df.m2,'sn_genes.in.modules.txt',sep'\t',quote=F,row.names = F)
df.m1=data.frame(gene.symbol=unlist(m1),
module.id=paste('module',rep(1:length(m1),sapply(m1,length))))
write.table(df.m1,'sc_genes.in.modules.txt',sep='\t',quote=F,row.names = F)
df.m2=data.frame(gene.symbol=unlist(m2),
module.id=paste('module',rep(1:length(m2),sapply(m2,length))))
write.table(df.m2,'sn_genes.in.modules.txt',sep='\t',quote=F,row.names = F)
setwd("~/Documents/brain_core_test/benchmark")
## generate simu nets
#library(R.matlab)
source('src_syn_dataset_common.R')
source('src_evaluation.R')
source('src_syn_dataset_overlap.R')
(files=Sys.glob('../brain_core_scran/pipeline_codes/*'))
for(file in files){source(file)}
numCores=12;
nrep=20; #7hrs
library(tidyverse)
library(gridExtra)
plot.list=list();i=0;
dir.name=Sys.glob('noise*')
for(x.dir in dir.name){
g.mean=strsplit(x.dir,'_')[[1]][2]
g.var=strsplit(x.dir,'_')[[1]][3]
for(y in c('common_T1.5','overlap_T1.5')){
files=Sys.glob(paste0(x.dir, '/',y,'/*txt'))
#files=Sys.glob(paste0(x.dir, '/common_T1.5/*txt'))
#files=Sys.glob('noise_0.25_0.1/overlap_T1.5/*txt')
out=lapply(files,function(file){
df=read.table(file,header=T)
alpha=df[df$name=='alpha',]$value[1]
df=df[!df$name %in% c('alpha','n.net'),]
x=df %>% group_by(name) %>% summarise(n=n(),mean=mean(value),sd=sd(value))
x$alpha=alpha;
x
})
if(length(grep('common',y))==1){
type='common'
}else{
type='overlapping'
}
plot.title=paste0('Gaussian noise with mean ',g.mean,', var ',g.var,'\n',
type,' module simulation scheme');
df.x=as.data.frame(Reduce(`rbind`,out))
df.x$name=factor(df.x$name,levels=c('TPR','FPR','Accuracy','MCC'))
i=i+1;
plot.list[[i]]<- ggplot(subset(df.x,name!='Accuracy'),aes(x=alpha,y=mean))+geom_point()+
facet_wrap(.~name,ncol=4)+theme_classic()+
xlab('Alpha')+ylab('')+
scale_x_continuous(breaks=seq(0.1,0.9,0.2),
labels=seq(0.1,0.9,0.2))+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.05,
position=position_dodge(0))+
#ggtitle(dirname(files[1]))
ggtitle(plot.title)
}
}
pdf('simulated.network_plot.pdf',useDingbats = T,height = 9)
grid.arrange(arrangeGrob(grobs= plot.list,ncol=2))
dev.off()
pdf('simulated.network_plot.pdf',useDingbats = T,height = 6,width = 8)
grid.arrange(arrangeGrob(grobs= plot.list,ncol=2))
dev.off()
