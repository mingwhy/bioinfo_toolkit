#       C_reference: a cell containing the ground truth
#       N: total number of items
# OUTPUT:
#       TPR: the True Positive Rate
#       FPR: the False Positive Rate
#       Accuracy:
#       MCC: the Matthews Correlation Coefficient
#
## Confusion matrix
K_preticted = length(C_preticted);
K_reference = length(C_reference);
Ncount_P = 0;
Ncount_R = 0;
c_num = matrix(0,nrow=K_preticted+1, ncol=K_reference+1);
C =  vector(mode = "list", length = K_preticted)
for(i in 1:K_preticted){
Ncount_P = Ncount_P + length(C_preticted[[i]]);
theRef_nonoverlap = c();
for(j in 1:K_reference){
C[[i]][[j]] <- intersect(as.numeric(C_preticted[[i]]),as.numeric(C_reference[[j]]));
c_num[i, j] = length(C[[i]][[j]]);
if (i == 1){
Ncount_R = Ncount_R + length(C_reference[j]);
}
theRef_nonoverlap = unique(c(theRef_nonoverlap, C[[i]][[j]]))
}
c_num[i, j+1] = length(C_preticted[[i]]) - length(theRef_nonoverlap); # Background noise nodes
}
for(j in 1:K_reference){
thePre_nonoverlap = c();
for(i in 1:K_preticted){
thePre_nonoverlap = unique(c(thePre_nonoverlap, C[[i]][[j]]));
}
c_num[i+1, j] = length(C_reference[[j]]) - length(thePre_nonoverlap); # Lost reference nodes
}
## TP, FP, FN, TN for nodes pairs
TP = sum(sum(c_num[1:K_preticted, 1:K_reference]*
(c_num[1:K_preticted, 1:K_reference]-1)/2));
FP = 0;
for(j in 1:K_reference){
tempC = c_num[1:K_preticted, (j+1):(K_reference+1),drop=FALSE];
FP = FP + sum(c_num[1:K_preticted,j]*Matrix::rowSums(tempC));
}
FN = 0;
for(i in 1:K_preticted){
tempC = c_num[(i+1):(K_preticted+1), 1:K_reference,drop=FALSE];
FN = FN + sum(c_num[i,1:K_reference]*Matrix::colSums(tempC));
}
TN = N*(N-1)/2 - (TP+FN+FP);
I = rbind(c(TP, FP),c(FN, TN));
## TPR, FPR, MCC
TPR = TP/(TP+FN);
FPR = FP/(FP+TN);
Accuracy = (TP+TN)/(TP+FP+TN+FN);
MCC = (TP*TN-FP*FN)/sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN));
return(list(TPR=TPR,FPR=FPR,Accuracy=Accuracy,MCC=MCC))
}
#[ TPR, FPR, Accuracy, MCC] = evaluation(modules_final, realLabels, num_Nodes);
out3=evaluation(modules_final, realLabels, num_Nodes)
OUT3
out3
modules_final
num_Nodes
permu_times=100
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
moduleCounts
networkCounts
nodeCounts
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
x
y
moduleCounts
networkCounts
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
moduleDensity
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
clusterQuality
null_counts = array(moduleCounts, networkCounts, permu_times);
null_counts
null_counts = array(0,moduleCounts, networkCounts, permu_times);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
null_counts
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
sprintf()
m
m=1
moduleCounts
sprintf('Module %d/%d...\n', m, moduleCounts);
modules[[1]]
theModule = modules[[m]];
length(theModule)
moduleN = length(theModule)*(length(theModule)-1)/2;
moduleN
n=1
theNetwork = multiNetworks[[n]];
y
theNetwork
theNetwork[, 1]
theModule
theModule
theNetwork[theModule, theModule]
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
inDen
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity
m
n
moduleDensity[m, n] = inDen/moduleN;
for(n in 1:networkCounts){
theNetwork = multiNetworks[[n]];
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity[m, n] = inDen/moduleN;
clusterQuality[m, n] = moduleDensity[m, n]/outDen;
}
sample(nodeCounts)
randnum = sample(nodeCounts,replace = F);
randnum
length(unique(randnum))
randnum = sample(nodeCounts,replace = F);
randnum = sample(nodeCounts,replace = F);
randModule = randnum[1:length(theModule)];
randModule
# (x == y) # full matrix format
randModule_matrix = theNetwork[randModule, randModule];
randModule_matrix
inDen = sum(sum(randModule_matrix))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0]= 1e-6;
inDen
outDen
ranModuleDensity = inDen/moduleN;
randClusterQuality = ranModuleDensity/outDen;
randClusterQuality
clusterQuality[m, n]
null_counts[1,1,1]
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
for(m in 1:moduleCounts){
sprintf('Module %d/%d...\n', m, moduleCounts);
theModule = modules[[m]];
moduleN = length(theModule)*(length(theModule)-1)/2;
for(n in 1:networkCounts){
theNetwork = multiNetworks[[n]];
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity[m, n] = inDen/moduleN;
clusterQuality[m, n] = moduleDensity[m, n]/outDen;
}
# Compute the random individual cluster quality and density
# And compute individual p-value
for(t in 1:permu_times){
randnum = sample(nodeCounts,replace = F);
randModule = randnum[1:length(theModule)];
# (x == y) # full matrix format
randModule_matrix = theNetwork[randModule, randModule];
inDen = sum(sum(randModule_matrix))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0]= 1e-6;
ranModuleDensity = inDen/moduleN;
randClusterQuality = ranModuleDensity/outDen;
if(randClusterQuality >= clusterQuality[m, n]){
null_counts[m, n, t] = 1;
}
}
}
null_counts
colSums(null_counts,3)
dim(colSums(null_counts,3))
apply(null_counts,MARGIN = c(1,2),sum)
apply(null_counts,MARGIN = c(1,2),sum)->tnpm
dim(tnpm)
permu_times
pvalues_modulePerNet = apply(null_counts,MARGIN = c(1,2),sum)/permu_times;
dim(pvalues_modulePerNet)
pvalues_modulePerNet
pvalues_modulePerNet = apply(null_counts,MARGIN = c(1,2),sum)/permu_times;
networkCounts
j=1
?p.adjust
p.adjust(pvalues_modulePerNet[,j],method='BH');
for(j in 1:networkCounts){
FDR[,j] = p.adjust(pvalues_modulePerNet[,j],method='BH');
end
return(list(pvalues_modulePerNet=pvalues_modulePerNet,FDR=FDR))
}
for(j in 1:networkCounts){
FDR[,j] = p.adjust(pvalues_modulePerNet[,j],method='BH');
}
FDR
pvalues_modulePerNet = apply(null_counts,MARGIN = c(1,2),sum)/permu_times;
for(j in 1:networkCounts){
FDR[,j] = p.adjust(pvalues_modulePerNet[,j],method='BH');
}
FDR
pvalues_modulePerNet
null_counts[,,1]
null_counts[,,2]
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
for(m in 1:moduleCounts){
sprintf('Module %d/%d...\n', m, moduleCounts);
theModule = modules[[m]];
moduleN = length(theModule)*(length(theModule)-1)/2;
for(n in 1:networkCounts){
theNetwork = multiNetworks[[n]];
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity[m, n] = inDen/moduleN;
clusterQuality[m, n] = moduleDensity[m, n]/outDen;
}
# Compute the random individual cluster quality and density
# And compute individual p-value
for(t in 1:permu_times){
randnum = sample(nodeCounts,replace = F);
randModule = randnum[1:length(theModule)];
# (x == y) # full matrix format
randModule_matrix = theNetwork[randModule, randModule];
inDen = sum(sum(randModule_matrix))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0]= 1e-6;
ranModuleDensity = inDen/moduleN;
randClusterQuality = ranModuleDensity/outDen;
if(randClusterQuality >= clusterQuality[m, n]){
null_counts[m, n, t] = 1;
}
}
}
#null_counts[,,2]
pvalues_modulePerNet = apply(null_counts,MARGIN = c(1,2),sum)/permu_times;
for(j in 1:networkCounts){
FDR[,j] = p.adjust(pvalues_modulePerNet[,j],method='BH');
}
fdr
FDR
pvalues_modulePerNet
null_counts[,,1]
permu_times
randnum
null_counts[1,1,3]
null_counts[1,1,4]
t
randClusterQuality
clusterQuality
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
moduleDensity
m=1
sprintf('Module %d/%d...\n', m, moduleCounts);
theModule = modules[[m]];
moduleN = length(theModule)*(length(theModule)-1)/2;
theModule
moduleN
networkCounts
#obs values
for(n in 1:networkCounts){
theNetwork = multiNetworks[[n]];
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity[m, n] = inDen/moduleN;
clusterQuality[m, n] = moduleDensity[m, n]/outDen;
}
moduleDensity
clusterQuality
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
m=1
sprintf('Module %d/%d...\n', m, moduleCounts);
theModule = modules[[m]];
moduleN = length(theModule)*(length(theModule)-1)/2;
#obs values
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
for(m in 1:moduleCounts){
sprintf('Module %d/%d...\n', m, moduleCounts);
theModule = modules[[m]];
moduleN = length(theModule)*(length(theModule)-1)/2;
#obs values
for(n in 1:networkCounts){
theNetwork = multiNetworks[[n]];
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity[m, n] = inDen/moduleN;
clusterQuality[m, n] = moduleDensity[m, n]/outDen;
# Compute the random individual cluster quality and density
# And compute individual p-value
for(t in 1:permu_times){
randnum = sample(nodeCounts,replace = F);
randModule = randnum[1:length(theModule)];
# (x == y) # full matrix format
randModule_matrix = theNetwork[randModule, randModule];
inDen = sum(sum(randModule_matrix))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0]= 1e-6;
ranModuleDensity = inDen/moduleN;
randClusterQuality = ranModuleDensity/outDen;
if(randClusterQuality >= clusterQuality[m, n]){
null_counts[m, n, t] = 1;
}
}
}
}
#null_counts[,,2]
pvalues_modulePerNet = apply(null_counts,MARGIN = c(1,2),sum)/permu_times;
for(j in 1:networkCounts){
FDR[,j] = p.adjust(pvalues_modulePerNet[,j],method='BH');
}
FDR
View(FDR)
#[ pvalues_modulePerNet, FDR2 ] = significantModules(modules_final, multiNetworks, num_Nodes);
out4=significantModules(modules_final, multiNetworks,num_Nodes,permu_times=1000);
#function [ pvalues_modulePerNet, FDR ] = significantModules( modules, multiNetworks, N, permu_times )
significantModules<-function( modules, multiNetworks, N, permu_times){
# Using a permutation test to assess the significance of functional modules across multiple networks.
# This allows identifying the specific conditions where each module is detected.
#
# INPUT:
#   modules:
#   multiNetworks: a cell containing adjacency matrices of multiple
#   networks
#   N: the total number of nodes in multiple networks
#   permu_times: the number of permutation times(default value is 1000)
#
# OUTPUT:
#   pvalues_modulePerNet: individual p-value of each module in each network
#   FDR: Benjamin-Hochberg adjusted p-values
#
## Initialization
moduleCounts = length(modules);
networkCounts = length(multiNetworks);
nodeCounts = N;
x=nrow(multiNetworks[[1]])
y=ncol(multiNetworks[[1]])
## Permutation test
moduleDensity = matrix(0,nrow=moduleCounts,ncol= networkCounts);
clusterQuality = matrix(0,nrow=moduleCounts,ncol=networkCounts);
null_counts = array(0,dim=c(moduleCounts, networkCounts, permu_times));
FDR = matrix(0,nrow=moduleCounts, ncol=networkCounts);
for(m in 1:moduleCounts){
sprintf('Module %d/%d...\n', m, moduleCounts);
theModule = modules[[m]];
moduleN = length(theModule)*(length(theModule)-1)/2;
#obs values
for(n in 1:networkCounts){
theNetwork = multiNetworks[[n]];
# Compute the individual cluster quality and density
# x==y, full matrix format
inDen = sum(sum(theNetwork[theModule, theModule]))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0] = 1e-6;
moduleDensity[m, n] = inDen/moduleN;
clusterQuality[m, n] = moduleDensity[m, n]/outDen;
# Compute the random individual cluster quality and density
# And compute individual p-value
for(t in 1:permu_times){
randnum = sample(nodeCounts,replace = F);
randModule = randnum[1:length(theModule)];
# (x == y) # full matrix format
randModule_matrix = theNetwork[randModule, randModule];
inDen = sum(sum(randModule_matrix))/2;
outDen = (sum(sum(theNetwork))/2 - inDen)/(nodeCounts-length(theModule));
outDen[outDen==0]= 1e-6;
ranModuleDensity = inDen/moduleN;
randClusterQuality = ranModuleDensity/outDen;
if(randClusterQuality >= clusterQuality[m, n]){
null_counts[m, n, t] = 1;
}
}
}
}
#null_counts[,,2]
pvalues_modulePerNet = apply(null_counts,MARGIN = c(1,2),sum)/permu_times;
for(j in 1:networkCounts){
FDR[,j] = p.adjust(pvalues_modulePerNet[,j],method='BH');
}
return(list(pvalues_modulePerNet=pvalues_modulePerNet,FDR=FDR))
}
#[ pvalues_modulePerNet, FDR2 ] = significantModules(modules_final, multiNetworks, num_Nodes);
out4=significantModules(modules_final, multiNetworks,num_Nodes,permu_times=1000);
source('dev*.R')
Sys.glob('dev*.R')
files=Sys.glob('dev*.R')
for(file in files) source(file)
## read in simu networks
(files=Sys.glob('simu_dat/network_*.txt'))
i=0;
multiNetworks=list()
for(file in files){
x=as.matrix(read.table(file,as.is=T))
#dim(x)
i=i+1;
multiNetworks[[i]]=x
}
## read in labels
xrealLabels = read.table('./simu_dat/labels.txt',as.is=T);
realLabels=list()
for(i in 1:nrow(xrealLabels)){
realLabels[[i]]=as.numeric(xrealLabels[i,]);
}
realLabels[[1]]
## step by step finding conserved functional modules
# Calculting the feature networks
cat('Calculating the strengh matrix and the uniformity matrix...\n')
out=featureNets(multiNetworks)
names(out)
#saveRDS(out,'X_for_multiViewNMF.rds')
#Obtaining the candidate modules by multi-view NMF
cat('Obtaining candidate modules by multi-view NMF...\n')
K = 5;
X = out;
lambda = c(0.01, 0.05);
#[ H, Hc, objValue ] = multiViewNMF( X, K, lambda, 50 );
out2 = multiViewNMF( X, K, lambda, maxIter=100 );
H=out2$H;sapply(H,dim)
Hc=out2$Hc
Hc[1:10,1:3]
# Selecting nodes from the consensus factors
tic=Sys.time()
xita = 1.5;
modules_final = moduleNodesSelection( Hc, xita );
toc =Sys.time()
cat('Running time: ', toc-tic,'secs\n')
## Clustering performance
dim(multiNetworks[[1]])
num_Nodes=500;
#[ TPR, FPR, Accuracy, MCC] = evaluation(modules_final, realLabels, num_Nodes);
out3=evaluation(modules_final, realLabels, num_Nodes)
out3
## Module validation
cat('Validation...\n')
#[ pvalues_modulePerNet, FDR2 ] = significantModules(modules_final, multiNetworks, num_Nodes);
out4=significantModules(modules_final, multiNetworks,num_Nodes,permu_times=1000);
names(out4)
apply(out4$FDR,1,function(i) sum(i<0.05))
out4$FDR
